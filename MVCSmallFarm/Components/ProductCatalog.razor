@using MVCSmallFarm.Repositories
@using System.Data
@using MVCSmallFarm.ViewModels
@using MVCSmallFarm.Models.dbs
@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Mvc.Core.Fluent 



@page "/"
@*@implements IAsyncDisposable*@
@inject IJSRuntime JS
@inject ICategoriesRepository _catrepo;
@inject DBConnector cn;

<h3>LucyNumberGenerator</h3>
<br />
<hr />



<div class="text-success h3">Title</div>
<button @onclick="GenerateNumber" class="btn btn-dark">Generate Number</button>

@if (CategoryLst != null)
{
    @*<select class="form-control" @bind="@SelectedCategoryID">*@

    <select class="form-control" @onchange="@OnSelect">


        @foreach (var cat in CategoryLst)
        {
            <option value="@cat.CategoryId"> @cat.CategoryId- @cat.CategoryName </option>
        }

    </select>
    <br />
    <p>@SelectedCategoryID</p>
}

@if (LuckyNumber > 0)
{
    <p>Lucky Number - @LuckyNumber</p>

}

@{
    const int colCount = 3;
    var items = Product;
}

<table id="example" data-stripe-classes="[]" class="table">
        <thead style="display:none;">
            <tr>

                @for (var c = 0; c < colCount; c++)
                {
                    <th></th>
                }
            </tr>
        </thead>
        <tbody>

            @if (items.Count() >= 1)
            {
                @for (var i = 0; i < items.Count(); i += colCount)
                {

                    <tr>
                        @for (var c = 0; c < colCount && i + c < items.Count()+1; c++)
                        {

                            @if (i + c  < items.Count()) {
                                <td class="noBorder">
                                    <div class="container-bg">
                                        <div class="container">
                                            <div class="row">
                                                <div class="col-md-12 gy-3">
                                                    <div class="h-100 w-100">
                                                        <div class="card-header align-items-center"><img src="@items[i + c].ImageUrl" class="card-img-top" alt="..."></div>
                                                        <div class="card-body">
                                                            <div class="row align-items-center text-center g-0">
                                                                <div class="col-12">

                                                                    @if (@items[i + c].IsPromotion == true)
                                                                    {
                                                                        <span>@items[i + c].ProductName</span>
                                                                        <span class="badge rounded-pill bg-danger"> Promotion</span>
                                                                    }
                                                                </div>
                                                            </div>
                                                            <div class="row align-items-center text-center g-0">
                                                                <div class="col-12">
                                                                    <h6>£ @items[i + c].Price</h6>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-12 text-lg-center">
                                                                    <div class="button-container">
                                                                        <a class="btn btn-outline-info btn-sm" onclick='showdetail("@items[i + c].ProductId","showcomment","<h4>Product Detail</h4>")'>View Detail</a>
                                                                        <a href="#" class="btn btn-primary btn-sm">ADD TO CART</a>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            }else
                            {
                                for(int j=c;j< colCount;j++)
                                { 
                                    <td>@j</td>
                                }

                            }
                        }
                    </tr>
                }
            }
       
        </tbody>
    </table>

 

    @code {

        int selectedCategoryID;
        int SelectedCategoryID
        {
            get => selectedCategoryID;
            set { selectedCategoryID = value; }
        }
        public int LuckyNumber { get; set; } = 0;
        //private string selectedString { get; set; }


        private readonly IProductRepository _prdrepo;
        List<Category> CategoryLst = new List<Category>();
        List<ProductCatViewModel> Product = new List<ProductCatViewModel>();
        IPagedList<ProductCatViewModel> ProductPL;

        protected override async Task OnParametersSetAsync()
        {

        }
        protected override async Task OnInitializedAsync()
        {

            if(CategoryLst.Count() == 0 && Product.Count() ==0)
            {
                CategoryLst =await _catrepo.GetAllCategory();  //Intitial DropdownList in Product/PartialAddOrEdit.cshtml
                Product = ProductList(SelectedCategoryID);
            }
            await base.OnInitializedAsync();



        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {

            if (firstRender == true)
            {
                await JS.InvokeVoidAsync("onBlazorReady");
            }
            base.OnAfterRender(firstRender);
        }



        private void OnSelect(ChangeEventArgs e)
        {
            SelectedCategoryID = Convert.ToInt32(e.Value);
            //selectedString = e.Value.ToString();
            Product = ProductList(SelectedCategoryID);
        }

        private List<ProductCatViewModel> ProductList(int id)
        {
            DataTable dt = new DataTable();
            dt = cn.ProductList(id);

            List<ProductCatViewModel> pd = new List<ProductCatViewModel>();
            pd = (from DataRow dr in dt.Rows
                  select new ProductCatViewModel()
                  {
                      ProductName = dr["ProductName"].ToString(),
                      ProductId = Convert.ToInt32(dr["ProductId"]),
                      IsPromotion = Convert.ToBoolean(dr["ProductId"]),
                      ImageUrl = $"/img/" + dr["ImageUrl"].ToString(),
                      Price = Convert.ToDecimal(dr["Price"]),
                      CategoryId = Convert.ToInt32(dr["CategoryId"]),
                      CategoryName = dr["CategoryName"].ToString()
                  }).ToList();

            return pd;
        }


        private void GenerateNumber()
        {
            Random rnd = new();

            LuckyNumber = rnd.Next(1, 100);
        }
    }
